{
  "jsx element": {
    "prefix": "j",
    "body": "<${1:elementName}>\n\t$0\n</${1}>",
    "description": "an element"
  },
  "jsx element self closed": {
    "prefix": "jc",
    "body": "<${1:elementName} />",
    "description": "an element self closed"
  },
  "jsx element wrap selection": {
    "prefix": "jsx wrap selection with element",
    "body": "<${1:elementName}>\n\t{$TM_SELECTED_TEXT}\n</${1}>",
    "description": "an element"
  },
  "jsx elements map with return": {
    "prefix": "jmr",
    "body": "{${1:array}.map((item) => {\n\treturn <${2:elementName} key={item.id}>\n\t$0\n</${2}>\n})}",
    "description": "an element self closed"
  },
  "useState": {
    "prefix": "us",
    "body": "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initValue})$0",
    "description": "React useState() hook"
  },
  "describeBlock": {
    "prefix": "desc",
    "body": ["describe('$1', () => {", "  $0", "})", ""],
    "description": "Testing `describe` block"
  },
  "itBlock": {
    "prefix": "tit",
    "body": ["it('should $1', () => {", "  $0", "})", ""],
    "description": "Testing `it` block"
  },
  "itAsyncBlock": {
    "prefix": "tita",
    "body": ["it('should $1', async () => {", "  $0", "})", ""],
    "description": "Testing async `it` block"
  },
  "reactFunctionComponent": {
    "prefix": "rfc",
    "body": "\n\ntype ${TM_FILENAME_BASE}Props = {}\n\nexport function ${TM_FILENAME_BASE}(props: ${TM_FILENAME_BASE}Props) {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
    "description": "Creates a React functional component"
  }
}
